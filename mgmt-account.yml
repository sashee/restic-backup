AWSTemplateFormatVersion: 2010-09-09
Parameters:
  SNSTopicArn:
    Type: String
    Description: "The ARN of the SNS topic in the member account"
  ManagementStackName:
    Type: String
    Description: "The name of the deployed starter stack"
Resources:
  LambdaLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 365
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: allow-logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 'logs:PutLogEvents'
              - 'logs:CreateLogStream'
              Resource: !Sub "${LambdaLogGroup.Arn}:*"
            - Effect: Allow
              Action:
              - 'sns:Publish'
              Resource: !Ref SNSTopicArn
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      ReservedConcurrentExecutions: 1
      Timeout: 900
      Code:
        ZipFile: |
          const { promisify } = require("node:util");
          const zlib = require("zlib");
          const {SNSClient, PublishCommand} = require("@aws-sdk/client-sns");

          exports.handler = async (event) => {
            const unzipped = await promisify(zlib.gunzip)(Buffer.from(event.awslogs.data, "base64"));
            const parsed = JSON.parse(unzipped.toString());
            if (parsed.messageType === "DATA_MESSAGE") {
              const client = new SNSClient({region: process.env.TargetSNSTopicArn.split(":")[3]});
              await Promise.all(parsed.logEvents.map(async ({message}) => {
                const res = await client.send(new PublishCommand({
                  Message: message,
                  TopicArn: process.env.TargetSNSTopicArn,
                }));
              }));
            }
          };
      LoggingConfig:
        LogGroup: !Ref LambdaLogGroup
        LogFormat: JSON
      Environment:
        Variables:
          TargetSNSTopicArn: !Ref SNSTopicArn
  LogsSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      LogGroupName: !Select
        - 6
        - !Split
          - ":"
          - Fn::ImportValue: !Sub "${ManagementStackName}-CloudWatchLogGroupArn"
      FilterPattern: !Sub
      - '{$.recipientAccountId = "${RecipientAccountId}" && ($.errorCode = "AccessDenied" || $.eventName = "GetCallerIdentity" || $.eventName = "ConsoleLogin")}'
      - RecipientAccountId: !Select
        - 4
        - !Split
          - ":"
          - !Ref SNSTopicArn
      DestinationArn: !GetAtt LambdaFunction.Arn
  InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "logs.amazonaws.com"
      SourceArn:
        Fn::ImportValue:
          !Sub "${ManagementStackName}-CloudWatchLogGroupArn"
