name: build packages

on:
  push:


jobs:
  build-arch-package:
    runs-on: ubuntu-latest
    container: archlinux:base-devel
    permissions:
      contents: write
      id-token: write
      attestations: write

    steps:
    - uses: actions/checkout@v4
    - name: Setup builder user
      run: 'mkdir -p /etc/sudoers.d && useradd -m builder && echo "builder ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/builder && chmod -R 777 .'
    - name: Install dependencies
      run: pacman --noconfirm -Sy pacman-contrib namcap nodejs
    - name: update source hashes
      run: runuser -u builder -- updpkgsums
      working-directory: ./clients
    - name: check PKGBUILD
      run: 'if [ -n "$(runuser -u builder -- namcap -m PKGBUILD)" ]; then (namcap PKGBUILD; exit 1) else (exit 0) fi'
      working-directory: ./clients
    - name: makepkg
      run: runuser -u builder -- makepkg --syncdeps --noconfirm --rmdeps
      working-directory: ./clients
    - name: Attest
      id: attest
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: './clients/*.pkg.tar.zst'
    - name: Copy attestation file
      if: startsWith(github.ref, 'refs/tags/')
      run: cp $BUNDLE arch-bundle-attestation.jsonl
      env:
        BUNDLE: ${{steps.attest.outputs.bundle-path}}
    - uses: actions/upload-artifact@v4
      with:
        name: arch-package
        path: './clients/*.pkg.tar.zst'
        if-no-files-found: error
    - name: Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          clients/*.pkg.tar.zst
          arch-bundle-attestation.jsonl

  test-arch-package:
    runs-on: ubuntu-latest
    container: archlinux:base
    needs: build-arch-package
    if: false

    steps:
    - name: Setup builder user
      run: 'mkdir -p /etc/sudoers.d && useradd -m builder && echo "builder ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/builder && chmod -R 777 .'
    - name: install node
      run: pacman -Sy --noconfirm nodejs
    - uses: actions/download-artifact@v4
      with:
        name: arch-package
    - name: Display structure of downloaded files
      run: ls -R
    - name: Install the package
      run: pacman -U --noconfirm *.pkg.tar.zst
    - name: Run the check
      run: /usr/lib/restic-backup-client/index.js check

  build-deb-package:
    runs-on: ubuntu-latest
    container: ubuntu:latest
    needs: build-arch-package
    if: false
    permissions:
      contents: write
      id-token: write
      attestations: write

    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: apt update && apt install -y pacman-package-manager nodejs sudo zstd
    - name: create target directory
      run: mkdir -p ./target
    - uses: actions/download-artifact@v4
      with:
        name: arch-package
    - name: ls
      run: ls -Rl
    - name: Setup builder user
      run: 'useradd -m builder && echo "builder ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/builder && chmod -R 777 .'
    - name: prepare target directory
      run: tar --zstd -xvf *.pkg.tar.zst -C ./target
    - name: remove files from target directory
      run: find . -maxdepth 1 -type f -delete
      working-directory: ./target
    - name: makepkg
      run: runuser -u builder -- makepkg --printsrcinfo > .SRCINFO
      working-directory: ./clients
    - name: setup control file
      run: |
        cat .SRCINFO | awk '$1 == "pkgname" {print "Package: " substr($0, index($0,"= ")+2)}' >> control
        cat .SRCINFO | awk '$1 == "pkgver" {version = substr($0, index($0,"= ")+2)} $1 == "pkgrel" {rel = substr($0, index($0,"= ")+2)} END{print "Version: " version "-" rel}' >> control
        cat .SRCINFO | awk '$1 == "pkgdesc" {print "Description: " substr($0, index($0,"= ")+2)}' >> control
        cat .SRCINFO | awk '$1 == "arch" {val = substr($0, index($0,"= ")+2); print "Architecture:", (val == "any") ? "all" : val}' >> control
        cat .SRCINFO | awk '$1 == "license" {print "License: " substr($0, index($0,"= ")+2)}' >> control
        cat PKGBUILD | awk 'index($0, "Maintainer:") {print "Maintainer: " substr($0, index($0,": ")+2)}' >> control
        cat .SRCINFO | awk '$1 == "url" {print "Homepage: " substr($0, index($0,"= ")+2)}' >> control
        cat .SRCINFO | awk 'BEGIN{res=""} $1 == "depends" {if (res == "") {res = substr($0, index($0,"= ")+2)} else {res = (res ", " substr($0, index($0,"= ")+2))}} END{print "Depends: " res}' >> control
      working-directory: ./clients
    - name: show control file
      run: cat control
      working-directory: ./clients
    - name: copy control file
      run: mkdir -p ./target/DEBIAN && cp ./clients/control ./target/DEBIAN/control
    - name: pwd
      run: pwd
      working-directory: ./target
    - name: ls in target
      run: ls -Rla
      working-directory: ./target
    - name: create deb
      run: dpkg-deb --root-owner-group --build ./target .
    - name: ls2
      run: ls -sla
    - name: Attest
      id: attest
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: './*.deb'
    - name: Copy attestation file
      if: startsWith(github.ref, 'refs/tags/')
      run: cp $BUNDLE deb-bundle-attestation.jsonl
      env:
        BUNDLE: ${{steps.attest.outputs.bundle-path}}
    - uses: actions/upload-artifact@v4
      with:
        name: aadeb-package
        path: './*.deb'
        if-no-files-found: error
    - name: Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          *.deb
          deb-bundle-attestation.jsonl

  prepare-termux-package:
    runs-on: ubuntu-latest
    needs: build-arch-package
    container: ubuntu:latest
    permissions:
      contents: write
      id-token: write
      attestations: write

    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: apt update && apt install -y pacman-package-manager nodejs zstd
    - uses: actions/download-artifact@v4
      with:
        name: arch-package
    - name: Setup builder user
      run: 'mkdir -p /etc/sudoers.d/ && useradd -m builder && echo "builder ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/builder && chmod -R 777 .'
    - name: makepkg
      run: runuser -u builder -- makepkg --printsrcinfo > .SRCINFO
      working-directory: ./clients
    - name: extract package name
      id: package-name
      run: |
        cat .SRCINFO | awk '$1 == "pkgname" {print "package-name=" substr($0, index($0,"= ")+2)}' >> $GITHUB_OUTPUT
      working-directory: ./clients
    - name: setup build.sh
      run: |
        cat .SRCINFO | awk '$1 == "pkgver" {version = substr($0, index($0,"= ")+2)} $1 == "pkgrel" {rel = substr($0, index($0,"= ")+2)} END{print "TERMUX_PKG_VERSION=\"" version "-" rel "\""}' >> build.sh
        cat .SRCINFO | awk '$1 == "pkgdesc" {print "TERMUX_PKG_DESCRIPTION=\"" substr($0, index($0,"= ")+2) "\""}' >> build.sh
        cat .SRCINFO | awk '$1 == "arch" {val = substr($0, index($0,"= ")+2); print "TERMUX_PKG_PLATFORM_INDEPENDENT=" ((val == "any") ? "true" : "false")}' >> build.sh
        cat .SRCINFO | awk '$1 == "license" {print "TERMUX_PKG_LICENSE=\"" substr($0, index($0,"= ")+2) "\""}' >> build.sh
        cat PKGBUILD | awk 'index($0, "Maintainer:") {print "TERMUX_PKG_MAINTAINER=\"" substr($0, index($0,": ")+2) "\""}' >> build.sh
        cat .SRCINFO | awk '$1 == "url" {print "TERMUX_PKG_HOMEPAGE=\"" substr($0, index($0,"= ")+2) "\""}' >> build.sh
        cat .SRCINFO | awk 'BEGIN{res=""} $1 == "depends" {if (res == "") {res = substr($0, index($0,"= ")+2)} else {res = (res ", " substr($0, index($0,"= ")+2))}} END{print "TERMUX_PKG_DEPENDS=\"" res "\""}' >> build.sh
        sed 's/$PKGNAME/${{steps.package-name.outputs.package-name}}/g' termux-build.sh >> build.sh
      working-directory: ./clients
    - name: prepare package directory
      run: mkdir -p ./termux-packages/packages/${{steps.package-name.outputs.package-name}} && tar --zstd -xvf *.pkg.tar.zst -C ./termux-packages/packages/${{steps.package-name.outputs.package-name}}
    - name: remove extra files from the package directory
      run: find . -maxdepth 1 -type f -delete
      working-directory: ./termux-packages/packages/${{steps.package-name.outputs.package-name}}
    - name: copy build.sh file
      run: cp ./clients/build.sh ./termux-packages/packages/${{steps.package-name.outputs.package-name}}/build.sh
    - name: print build.sh
      run: cat ./termux-packages/packages/${{steps.package-name.outputs.package-name}}/build.sh
    - name: tar package
      run: tar -czvf termux-package.tar.gz -C ./termux-packages/packages ${{steps.package-name.outputs.package-name}}
    - uses: actions/upload-artifact@v4
      with:
        name: 00_prepared-termux-package
        path: './termux-package.tar.gz'
        if-no-files-found: error

  build-termux-package:
    runs-on: ubuntu-latest
    needs: prepare-termux-package
    permissions:
      contents: write
      id-token: write
      attestations: write

    steps:
    - uses: actions/checkout@v4
    - name: clone termux-packages
      run: git clone https://github.com/termux/termux-packages.git
    - uses: actions/download-artifact@v4
      with:
        name: 00_prepared-termux-package
    - name: files
      run: ls -R
    - name: tar tf
      run: tar tf termux-package.tar.gz > contents
    - name: tar tf
      run: cat contents | head -n 1
    - name: tar tf
      run: cat contents | head -n 1 | awk -F/ '{print $1}'
    - name: tar tf
      run: "cat contents | head -n 1 | awk -F/ '{print $1}' >> $GITHUB_OUTPUT && rm contents"
    - name: extract package
      run: tar -xvf ./termux-package.tar.gz -C ./termux-packages/packages
    - name: run run-docker.sh
      run: ./scripts/run-docker.sh ./build-package.sh -i ${{steps.package-name.outputs.package-name}}
      working-directory: ./termux-packages
    - name: files
      run: ls -R
      working-directory: ./termux-packages
    - name: files
      run: ls -R
      working-directory: ./termux-packages/packages
    - name: files
      run: ls -R
      working-directory: ./termux-packages/packages/${{steps.package-name.outputs.package-name}}

  test-deb-package:
    runs-on: ubuntu-latest
    container: ubuntu:latest
    needs: build-deb-package
    if: false

    steps:
    - name: Install dependencies
      run: apt update && apt install -y nodejs
    - uses: actions/download-artifact@v4
      with:
        name: aadeb-package
    - name: Display structure of downloaded files
      run: ls -R
    - name: Install the package
      run: apt update && apt install -y ./*.deb
    - name: Run the check
      run: /usr/lib/restic-backup-client/index.js check

